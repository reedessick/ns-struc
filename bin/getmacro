#!/usr/bin/env python

'GETMACRO -- look up macroscopic observables for specified stellar configuration with selected EoS'
__author__ = 'philippe.landry@ligo.org and Reed Essick (reed.essick@gmail.com)'

#-------------------------------------------------

import numpy as np
from scipy.interpolate import interp1d

from argparse import ArgumentParser

from nsstruc.macro import macro

#-------------------------------------------------

parser = ArgumnetParser(description=__doc__)

parser.add_argument('paths', type=str, nargs='+')

parser.add_argument('-p', '--prop', nargs=2, type=str, default=('M', '1.4'),
    help='macroscopic observable (M=1.4, R=max, Lambda=min, ...) at which to look up other NS properties, DEFAULT=M=1.4')

parser.add_argument('-d', '--dir', default='./dat/', type=str,
    help='path to directory housing NS properties data')

parser.add_argument('-o', '--outdir', default='./dat/', type=str,
    help='path to output directory')
parser.add_argument('-t', '--tag', default='', type=str,
    help='tag to append to output filename')
parser.add_argument('-f', '--filename', default='canon', type=str,
    help='output filename (automatically appends .csv), DEFAULT=canon')

parser.add_argument('-b', '--branchfile', action='store_true', default=False,
    help='toggle expect branch file input')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
    help='toggle verbose output')

#------------------------

args = parser.parse_args()

eosnames = args.paths
prop = (args.prop[0], float(args.prop[1]))

var = prop[0]

indir = args.dir
outdir = args.outdir
tag = args.tag
filename = args.filename
branch = args.branchfile
verb = args.verbose

#-------------------------------------------------

# INTERPOLATE MASS RELATIONS FOR EACH EOS

properties = np.genfromtxt(indir+eosnames[0], names=True, delimiter=',')
props = list(properties.dtype.names)
props.remove(var)

outfile = open(outdir+filename+tag+".csv","w")
header = 'EoS,'+var+','+','.join(props)+' \n'
outfile.write(header)

for eosname in eosnames:

    if branch:
        shortname = eosname.split('-')[-2]+'-'+eosname.split('-')[-1]
    else:
        shortname = (eosname.split('-')[-1]).split('.')[0]

    if verb:
        print('Read macroscopic properties of '+shortname+' stars')

    propspath = indir+eosname
    macros = macro(propspath,prop)

# RETURN PROPERTIES AT TARGET VALUE

    if verb:
        print('Save properties of '+prop+' star')

    macros = [str(obs) for obs in macros]
    macros.insert(0,shortname)
    outfile.write(','.join(macros)+'\n')
