#!/usr/bin/env python

'GETNSPROPS -- calculate NS properties as a function of central density for selected EoSs'
__author__ = 'philippe.landry@ligo.org and Reed Essick (reed.essick@gmail.com)'
__date__ = '03-2019'

#-------------------------------------------------

import os

import numpy as np
from scipy.interpolate import interp1d

from argparse import ArgumentParser

### non-standard libraries
from nsstruc import tov
from nsstruc.constants import rhonuc

#-------------------------------------------------

OUTPATH_TEMPLATE = '%s/macro-%s'
def eospath2macropath(path):
    path = os.path.abspath(path)
    return OUTPATH_TEMPLATE%(os.path.dirname(path), os.path.basename(path))

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

#---

group = parser.add_argument_group('required arguments')

group.add_argument('eos', nargs='+', type=str)
group.add_argument('-p', '--props', nargs='+', type=str, default=tov.DEFAULT_PROPS,
    help='list of NS properties to calculate, DEFAULT=%s'%tov.DEFAULT_PROPS)

#---

group = parser.add_argument_group('macroscopic arguments')

group.add_argument('-r', '--rhoc-range', nargs=2, type=float, default=tov.DEFAULT_RHOC_RANGE,
    help='comma-separated min and max values for central density in units of rhonuc.')
group.add_argument('--rtol', type=float, default=tov.DEFAULT_RTOL,
    help='the maximum relative error allowed between neighboring points in the resulting properties arrays.')

group.add_argument('--min-m', default=tov.DEFAULT_MIN_M, type=float,
    help='focus the bisection search only on parts of --rhoc-range that produce models above this mass. \
There could be loopholes in the logic asssociated with non-monotonicity of M with rhoc, so we do not recommend setting particularly agressive --min-m')

#---

group = parser.add_argument_group('individual TOV arguments')

group.add_argument('-s', '--initial-R', type=float, default=tov.DEFAULT_INITIAL_R,
    help='starting point for radial TOV integration in cm. Should be small.')
group.add_argument('-N', '--max-num-R', type=int, default=tov.DEFAULT_MAX_NUM_R,
    help='number of points for radial TOV integration')
group.add_argument('--max-dR', type=float, default=tov.DEFAULT_MAX_DR,
    help='radius endpoint in cm for surface finding algorithm')
group.add_argument('-T', '--pressurec2-tol', type=float, default=tov.DEFAULT_PRESSUREC2_TOL,
    help='pressure tolerance for surface finding algorithm in g/cm^3')

#---

group = parser.add_argument_group('verbosity arguments')

group.add_argument('-v', '--verbose', action='store_true', default=False)
group.add_argument('-V', '--Verbose', action='store_true', default=False,
    help='print how many iterations each integration took')

#---

args = parser.parse_args()

args.verbose |= args.Verbose

for prop in args.props:
    assert prop in tov.KNOWN_PROPS, 'prop=%s not understood!'%prop

if 'R' not in args.props: ### we must have this present because integration termination condition is based on finding R!
    args.props.append('R')
if 'M' not in args.props:
    args.props.append('M')

header = 'rhoc,'+','.join(args.props)

min_rhoc, max_rhoc = np.array(args.rhoc_range)*rhonuc

#-------------------------------------------------

### CALCULATE NS PROPERTIES FOR EACH EOS

for eospath in args.eos:
    if args.verbose:
        print('Calculating properties from: %s'%eospath)

    ### load data
    data = np.genfromtxt(eospath, names=True, delimiter=',')
    baryon_density = data['baryon_density']     # rest-mass energy density in units of g/cm^3
    pressurec2 = data['pressurec2']             # pressure in units of g/cm^3
    energy_densityc2 = data['energy_densityc2'] # total energy density in units of g/cm^3

    ### define interpolators
    rho = interp1d(pressurec2, baryon_density, kind='linear', bounds_error=False, fill_value=0)
    eps = interp1d(pressurec2, energy_densityc2, kind='linear', bounds_error=False, fill_value=0)
    cs2i = interp1d(pressurec2, np.gradient(energy_densityc2, pressurec2), kind='linear', bounds_error=False, fill_value=0)
    prs = interp1d(baryon_density, pressurec2, kind='linear', bounds_error=False, fill_value=0)

    ### define integration function, which will be re-used within iteration over rhoc
    efe = tov.define_efe(eps, cs2i, rho, args.props)

    ### integrate until we hit the required spacing for M, R, Lambda
    properties = tov.foliate(
        efe,
        prs,
        rho,
        eps,
        cs2i,
        args.initial_R,
        props=args.props,
        min_rhoc=max(min_rhoc, baryon_density[0]),  # need to add a warning if baryon_density limits this instead of min_rhoc?
        max_rhoc=min(max_rhoc, baryon_density[-1]), # same for max_rhoc?
        max_num_r=args.max_num_R,
        max_dr=args.max_dR,
        pressurec2_tol=args.pressurec2_tol,
        rtol=args.rtol,
        verbose=args.Verbose,
        min_m=args.min_m,
    )

    ### FIXME: add a conditional about stability of Mmax estimation? As in, if we refine the grid further around Mmax do we get convergent results

    if args.verbose:
        print('integrated a total of %d stellar models'%len(properties))

    macropath = eospath2macropath(eospath)
    if args.verbose:
        print('Saving: %s'%macropath)
    np.savetxt(macropath, properties, delimiter=',', comments='', header=header)
