#!/usr/bin/env python

'PLOTUR -- plot universal relations with selected EoSs'
__author__ = 'philippe.landry@ligo.org and Reed Essick (reed.essick@gmail.com)'

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

### non-standard libraries
from nsstruc.pltsetup import *
from nsstruc.constants import *

#-------------------------------------------------

# SPECIFY VARIABLES TO PLOT AND UNIVERSAL FIT

obslabels = {'R': r'$R$','Lambda': r'$\Lambda$','I': r'$\bar{I}$','C': r'$C$'}
obslog = {'R': 'linear','Lambda': 'log','I': 'log','C': 'linear'}
obsdict = {'Lambda': 'Lambda','C': 'R','I': 'I','R': 'R'}

fitparams = {'ILambda': [1.496,0.05951,0.02238,-6.953e-4,8.345e-6,True,True,1.],'CLambda': [0.360,-0.0355,0.000705,0.,0.,True,False,1.],'IC': [0.,0.8134,0.2101,0.003175,-2.717e-4,False,False,-1.],'RLambda': [12.,0.,0.,0.,0.,False,False,1.]}
# fits taken from Yagi+Yunes PhysRep 2016, Maselli+ PRD 2013, Breu+Rezzolla MNRAS 2016

#------------------------

def obs(var, dat, Mdat):
    if var == 'Lambda':
        return dat
    elif var == 'C':
        return G*Msun*Mdat/(c**2*dat*1e5)
    elif var == 'I':
        return c**4*dat*1e45/(G**2*(Mdat*Msun)**3)
    elif var == 'R':
        return dat
    else:
        raise ValueError('var=%s not understood!'%var)

def fit(x,params):
    sgn = params[-1]
    xlog = params[-3]
    ylog = params[-2]

    if not xlog:
        x = np.exp(x)

    logy = params[0] + params[1]*np.log(x)**sgn + params[2]*np.log(x)**(sgn*2) + params[3]*np.log(x)**(sgn*3) + params[4]*np.log(x)**(sgn*4)

    if not ylog:
        return logy
    else:
        return np.exp(logy)

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('paths', nargs='+', type=str)

parser.add_argument('-x', '--xvar', default='Lambda', type=str,
    help='which observable (Lambda, C or I) to plot on x-axis')
parser.add_argument('-y', '--yvar', default='C', type=str,
    help='which observable (Lambda, C or I) to plot on y-axis')
parser.add_argument('-m', '--mrng', nargs=2, type=float, default=(1.0 2.0),
    help='mass range for stellar sequences')
parser.add_argument('-d', '--dir', default='./dat/', type=str,
    help='path to directory housing NS properties data')
parser.add_argument('-o', '--outdir', default='./plt/', type=str,
    help='path to directory for plot output,')
parser.add_argument('-t', '--tag', default='', type=str,
     help='tag to append to output filename')
parser.add_argument('-f', '--pltname', default='urplot', type=str,
    help='plot output filename (automatically appends .png)')
parser.add_argument('-v', '--verbose', action='store_true', default=False,
    help='toggle verbose output')

args = parser.parse_args()

#------------------------

eosnames = args.paths

xvar = args.xvar
yvar = args.yvar

mrng = args.mrng

indir = args.dir
outdir = args.outdir
tag = args.tag
pltname = args.pltname
verb = args.verbose

#-------------------------------------------------

# SET UP FIGURE

fig = plt.figure(1)
fig.subplots_adjust(hspace=0., wspace=0.)

subplt = plt.subplot(2,1,1)
	
subplt.set_ylabel(obslabels[yvar])
subplt.set_xscale(obslog[xvar])
subplt.set_yscale(obslog[yvar])
subplt.set_xticks([],[])

subplt2 = plt.subplot(2,1,2)
	
subplt2.set_xlabel(obslabels[xvar])
subplt2.set_ylabel(r'$\Delta$'+obslabels[yvar])
subplt2.set_xscale(obslog[xvar])

# LOAD NS PROPERTIES FOR EACH EOS

xmin = 1e10
xmax = 0.
for i in range(len(eosnames)):

    eosname = eosnames[i]
    shortname = (eosname.split('/')[-1]).split('.')[0]
    if verb:
        print('Plotting '+yvar+'-'+xvar+' relation for '+shortname)

    propspath = indir+eosname
    propsdat = np.genfromtxt(propspath,names=True,delimiter=',')
	
    Mdat = propsdat['M']
    datlen = len(Mdat)
    Mdat = [M for M in Mdat if M >= mrng[0]]
    posi = datlen - len(Mdat)
    Mdat = np.asarray([M for M in Mdat if M <= mrng[1]])
    posf = posi+len(Mdat)-1
	
    xdat = propsdat[obsdict[xvar]]
    xdat = np.asarray([xdat[i] for i in range(posi,posf+1)])
    xdat = obs(xvar,xdat, Mdat)
	
    ydat = propsdat[obsdict[yvar]]
    ydat = np.asarray([ydat[i] for i in range(posi,posf+1)])
    ydat = obs(yvar,ydat, Mdat)
	
    fitdat = fit(xdat,fitparams[yvar+xvar])
    ydiff = np.abs(ydat - fitdat)/fitdat
	
    if np.min(xdat) < xmin:
        xmin = np.min(xdat)
    if np.max(xdat) > xmax:
        xmax = np.max(xdat)

# PLOT UNIVERSAL RELATION FOR EACH EOS

    subplt.plot(xdat,ydat,lw=0,label=shortname,marker='.')
    subplt2.plot(xdat,ydiff,lw=2,label=shortname,marker='.')

if verb:
    print('Done all EoSs\nPlotting best-fit relation')
xtab = np.linspace(xmin,xmax,100)
fitdat = fit(xtab,fitparams[yvar+xvar])
subplt.plot(xtab,fitdat,lw=2,label='fit',ls='--')
plt.legend(loc=0)
plt.savefig(outdir+pltname+tag+'.png')
