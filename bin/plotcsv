#!/usr/bin/env python

'PLOTCSV -- plot csv files file1.csv, file2.csv, ... '
__author__ = 'philippe.landry@ligo.org and Reed Essick (reed.essick@gmail.com)'

#-------------------------------------------------

import numpy as np

from argparse import ArgumentParser

from nsstruc.pltsetup import *

#-------------------------------------------------

parser = OptionParser(description=__doc__)

parser.add_argument('paths', nargs='+', type=str)

parser.add_argument('-x', '--xcol', default=False,
    help='which column to plot on x-axis, DEFAULT=FIRST_COLUMN', metavar='COLUMN_NAME')
parser.add_argument('-y', '--ycols', default=False,
    help='which columns to plot on y-axis, DEFAULT=OTHER_COLUMNS', metavar='COLUMN_NAME1,COLUMN_NAME2,...')
parser.add_argument('-l', '--lims', default=False,
    help='x and y ranges for plot, DEFAULT=AUTO', metavar='XMIN,XMAX,YMIN,YMAX')

parser.add_argument('-A', '--axislabels', default=False,
    help='x and y axis labels, DEFAULT=XCOLUMN_NAME,YCOLUMN_NAME1', metavar='XLABEL,YLABEL')
parser.add_argument('-L', '--logaxis', default='False,False',
    help='whether x and y axes should be log-scaled, DEFAULT=False,False', metavar='XBOOL,YBOOL')

parser.add_argument('-k', '--key', action='store_false', default=True,
    help='toggle legend/key display, DEFAULT=True', metavar='BOOL')

parser.add_argument('-a', '--alpha', default=1.,
    help='transparency of plotted curves, DEFAULT=1.', metavar='ALPHA')
parser.add_argument('-m', '--markers', action='store_false', default=True,
    help='toggle markers on curves, DEFAULT=True', metavar='BOOL')

parser.add_argument('-j', '--joined', action='store_false', default=True,
    help='toggle joined curves, DEFAULT=True', metavar='BOOL')

parser.add_argument('-r', '--refs', default=False,
    help='full paths to reference curve data files for overplots, DEFAULT=NONE', metavar='PATH/TO/FILE1,PATH/TO/FILE2')
parser.add_argument('-d', '--dir', default='./',
    help='input directory path, DEFAULT="./"', metavar='PATH/TO/DIR/')
parser.add_argument('-o', '--outdir', default='./',
    help='output directory path, DEFAULT="./"', metavar='PATH/TO/DIR')
parser.add_argument('-f', '--outfile', default='plot',
    help='plot basename for save, DEFAULT="plot"', metavar='PLOTNAME')
parser.add_argument('-t', '--tag', default='',
    help='tag to append to plot basename, DEFAULT=NONE', metavar='-TAG')

parser.add_argument('-c', '--cutoff', default=False,
    help='cutoff data at line number, DEFAULT=NONE', metavar='LINE_NUM')

args = parser.parse_args()

#------------------------

filenames = str(args[0]).split(',')

xvar = opts.xcol
if xvar:
    xvar=str(xvar)

yvar = opts.ycols
if yvar:
    yvar=str(yvar).split(',')

lims = opts.lims
if lims:
    lims = str(opts.lims).split(',')
    lims = [float(lim) for lim in lims]

labels = opts.axislabels
if labels:
    labels = str(labels).split(',')

logaxis = str(opts.logaxis).split(',')
logaxis = [not logax == 'False' for logax in logaxis]

key = opts.key

alph = float(opts.alpha)

markers = opts.markers
if not markers:
    mrk = None

joined = opts.joined
if not joined:
    lwidth = 0
else:
    lwidth = 1.5

refs = opts.refs
if refs:
    refs = str(refs).split(',')

indir = str(opts.dir)
outdir = str(opts.outdir)
pltname = str(opts.outfile)
tag = str(opts.tag)

cutoff = opts.cutoff
if cutoff:
    lastline=int(cutoff)-1

#-------------------------------------------------

# SET UP FIGURE

plt.figure(1)
if lims:
    plt.xlim(lims[0],lims[1])
    plt.ylim(lims[2],lims[3])
if logaxis[0]:
    plt.xscale('log')
if logaxis[1]:
    plt.yscale('log')

# READ CSV DATA FROM EACH FILE
j = 0
for fname in filenames:

    shortname = (fname.split('/')[-1]).split('.')[0]
    fpath = indir+fname
    fdat = np.genfromtxt(fpath,names=True,delimiter=',')

    if not xvar:
        xvar = fdat.dtype.names[0]
    if not yvar:
        yvar = fdat.dtype.names[1:]
    if not labels:
        labels = [xvar,yvar[0]]

    plt.xlabel(labels[0])
    plt.ylabel(labels[1])
	
    if alph != 1.: lc = AUTO_COLORS[0]
    else: lc = AUTO_COLORS[j]
	
# PLOT DATA

    i = 0
    for var in yvar:

        if markers:
            mrk = '.' #AUTO_MARKERS[i%len(AUTO_MARKERS)]
        style = AUTO_LINESTYLES[i%len(AUTO_LINESTYLES)]

        if i==0:
            lb = shortname
        else:
            lb = None	
	
        if cutoff:
            plt.plot(fdat[xvar][:lastline],fdat[var][:lastline],label=lb,color=lc,lw=lwidth,ls=style,marker=mrk,alpha=alph)		
    	else:
            plt.plot(fdat[xvar],fdat[var],label=lb,color=lc,lw=lwidth,ls=style,marker=mrk,alpha=alph)
		
        i = i+1
	
    j = j+1

if refs:
    for ref in refs:
        shortname = (ref.split('/')[-1]).split('.')[0]
        refdat = np.genfromtxt(ref,names=True,delimiter=',')
	
        i = 0
        for var in yvar:
            style = AUTO_LINESTYLES[i%len(AUTO_LINESTYLES)]
            if i==0:
                lb = shortname
            else:
                lb = None
		
            if cutoff:	
                plt.plot(refdat[xvar][:lastline],refdat[var][:lastline],label=lb,color='r',lw=lwidth,ls=style)		
            else:
                plt.plot(refdat[xvar],refdat[var],label=lb,color='r',lw=lwidth,ls=style)
			
            i = i+1

if len(yvar) > 1:
    caption = [' '+yvar[k]+' ('+AUTO_LINESTYLES[k%len(AUTO_LINESTYLES)]+')' for k in range(len(yvar))]
    plt.title(','.join(caption))

if key:
    plt.legend(loc=0)

plt.savefig(outdir+pltname+tag+'.png')
