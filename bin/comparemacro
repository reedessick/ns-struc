#!/usr/bin/env python

'COMPAREMACRO -- produce diagnostic plot of differences in macroscopic observables (e.g. rhoc,R,Lambda at M=1.4 Msun) across EoSs given separate computations macro1, macro2, ... listing EoSs in same order'
__author__ = 'philippe.landry@ligo.org and Reed Essick (reed.essick@gmail.com)'

#-------------------------------------------------

import os

import numpy as np

from argparse import ArgumentParser

from nsstruc import tov
from nsstruc.pltsetup import *

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('paths', nargs='+', type=str)

parser.add_argument('-p', '--props', nargs='+', type=str, default=tov.DEFAULT_PROP,
    help='list of NS properties to compare, DEFAULT=rhoc,M,R,Lambda')

parser.add_argument('-x', '--sharex', action='store_false', default=True,
    help='make separate figures instead of subplots with shared x-axis')

parser.add_argument('-d', '--dir', type=str, default='./dat/',
    help='path to directory housing NS properties data, DEFAULT=./dat/')
parser.add_argument('-o', '--outdir', type=str, default='./plt/',
    help='path to directory for plot output, DEFAULT=./plt/')
parser.add_argument('-t', '--tag', default=True,
    help='tag to append to output filename, DEFAULT="macro1_macro2..."')
parser.add_argument('-f', '--pltname', type=str, default='macroplot',
    help='plot output filename (automatically appends .png), DEFAULT=macroplot')

args = parser.parse_args()

#------------------------

macronames = args.paths

shortnames = [os.path.basename(macroname).split('.')[0] for macroname in macronames]

props = args.props
numprops = len(props)

sharex = args.sharex
indir = args.dir
outdir = args.outdir

tag = args.tag
if tag=:
    tag='_'.join(shortnames)

pltname = args.pltname

#-------------------------------------------------

fig = plt.figure(1)
fig.subplots_adjust(hspace=0., wspace=0.)
plt.suptitle('Fractional errors relative to '+shortnames[0], y=0.95)

# LOAD NS PROPERTIES FOR REFERENCE TABLE OF MACROSCOPIC OBSERVABLES (FIRST GIVEN)

macroname = macronames[0]
macropath = indir+macroname
refdat = np.genfromtxt(macropath, names=True, delimiter=',')

# LOAD MACROSCOPIC OBSERVABLES FROM EACH REMAINING TABLE

for macroname in macronames[1:]:

    shortname = (macroname.split('/')[-1]).split('.')[0]

    macropath = indir+macroname
    macrodat = np.genfromtxt(macropath, names=True, delimiter=',')
	
    for prop in props:
	
# CALCULATE FRACTIONAL DIFFERENCE RELATIVE TO REFERENCE TABLE'S OBSERVABLES
	
        fracdiffdat = abs(macrodat[prop]-refdat[prop])/refdat[prop] # fractional difference in observables for each EoS in list

# PLOT FRACTIONAL DIFFERENCES VS EOS NUMBER FOR EACH TABLE
	
        subpltnum = props.index(prop)+1
        if sharex:
            subplt = plt.subplot(numprops,1,subpltnum)	# make subplots
        else:							# or separate figs
            plt.figure(subpltnum)
            subplt = plt.subplot(1,1,1)
		
        subplt.set_xlabel(r'$\mathrm{EoS} \, \#$')
        subplt.set_ylabel(PROPSLABELS[prop])
        subplt.set_xticks([],[])
		
        subplt.plot(fracdiffdat,lw=2,label=shortname,marker='.')
		
        if not sharex: 
            subplt.xaxis.set_major_locator(AutoLocator())
            plt.legend(loc=0)
            plt.suptitle('Fractional errors relative to '+shortnames[0], y=0.95)		
            plt.savefig(outdir+pltname+tag+'-'+prop+'.png')

if sharex:
    subplt.xaxis.set_major_locator(AutoLocator())
    plt.legend(loc=0)		
    plt.savefig(outdir+pltname+tag+'.png')

